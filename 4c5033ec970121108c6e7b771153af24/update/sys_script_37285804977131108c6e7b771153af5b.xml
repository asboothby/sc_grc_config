<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sn_compliance_policy_exception</collection>
        <condition>(['2', '6', '10', '12'].indexOf(previous.state + '') &gt; -1) &amp;&amp; (current.requested_valid_to.nil() )</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sn_compliance_policy_exception">stateCHANGESTO8^EQ<item display_value="Approved" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="8"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Approve Policy Exception</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions>sn_compliance.manager</role_conditions>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var update = false;
	var now = new GlideDateTime();
	
	if (current.assigned_to.nil()) {
		gs.addErrorMessage(gs.getMessage('Cannot approve a policy exception without approver.'));
		current.setAbortAction(true);
	} else if(now > current.valid_to) {
		gs.addErrorMessage(gs.getMessage('Valid to date cannot be in the past.'));
		current.setAbortAction(true);
	} else if (!current.policy.nil() || (!current.issue.nil() && current.issue.sys_class_name.toString() == 'sn_vdr_risk_asmt_issue')) {
		
	} else {		
		var exceptionToItem = new GlideRecord('sn_compliance_m2m_policy_exception_control');
		exceptionToItem.addQuery("policy_exception", current.getUniqueValue());
		exceptionToItem.query();
		if (!exceptionToItem.hasNext()) {
			gs.addErrorMessage(gs.getMessage('Cannot approve the policy exception unless controls or policy is associated.'));
			current.setAbortAction(true);
		}
	}	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-05 09:52:05</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>37285804977131108c6e7b771153af5b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Approve Policy Exception</sys_name>
        <sys_overrides/>
        <sys_package display_value="SC GRC Config" source="x_631631_sc_grc_co">4c5033ec970121108c6e7b771153af24</sys_package>
        <sys_policy/>
        <sys_scope display_value="SC GRC Config">4c5033ec970121108c6e7b771153af24</sys_scope>
        <sys_update_name>sys_script_37285804977131108c6e7b771153af5b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-05 09:52:05</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=37285804977131108c6e7b771153af5b"/>
</record_update>
